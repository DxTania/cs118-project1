What we need:

number of open connections global

a vector of these connections (serverfd, clientfd, ip, port)
perhaps this list of requests/connections should be per client (YES)

a vector of requests going out (connection + thread)

ACCEPT CLIENT:
  each time we get a request from a client:

  get the ip address we need to connect to & port number

  if we already have a connection to that ip and port for SAME CLIENT
    insert request to queue
    send request to specified serverfd
      (make sure its still open to write to, if not reopen and update serverfd)
    relayResponse

  else
    open new connection if we have room else wait until we do have room
      this should happen in openconnectionwith
    insert request to queue (w/ thread #) and connection to list
    send request to serverfd we got when opening
    relayresponse (should not have to wait to read, but wait to write)

RELAYRESPONSE:
  we should know our position in the queue through an iterator

  if there are requests in front of us with same SERVERFD
    pthread_join on them before we start reading a response

  when we are at the front of the queue
    start reading from the server until END OF RESPONSE!

    if response is 304 not modified return cached response
    else update cache if there is no cache control

    write response to client
    remove self from queue
    pthread_exit

multiple threads will not be able screw with the request/connections vector because since all connections are to the same client, will always have to wait for a previous connection to finish and update vector before we start doing anything to teh vector

Timeouts:

Put a timeout on how long we keep a connection open, remove connection from connections and decrement numConnections on this timeout

If a server closes on us: sendRequest will catch and reopen connection

Each client/server combo will have its own sockets
When we get a client
  They may send us multiple requests of different sites

  Each time a request comes in, we put the request in a

  Then we call relayResponse with a new thread to get the response

  relayResponse will not read from server until threads ahead in queue with same serverfd are done reading

  relayResponse will not write to client until threads ahead in queue have finished writing to the client

  SENDREQUEST:
    if url / port are in the cache
    send if-modified-since header with cache response data
    else send the request (can you ask for cache info?)

other: put a mutex on the cache and number of total connections
